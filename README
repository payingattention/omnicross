
	 ##### #   # #   # ##### ##### ####  ##### ##### #####
         #   # ## ## ##  #   #   #     ##### #   # ####  ####
         #   # # # # # # #   #   #     #  #  #   #     #     #
         ##### #   # #   # ##### ##### #   # ##### ##### #####



Omnicross  Build a musl or glibc based cross compiler.
	



Installation:
	Retrieve the source code:
		git clone https://github.com/cmgraff/build
		cd build

	Build with gcc and glibc:
		./build.sh

	Build with gcc and musl:
		./muslbuild.sh 



Sparse installation (for slow networks):
	Retrieve the source code:
		i="https://raw.githubusercontent.com/cmgraff/omnicross/master/"
		wget "${i}/build.sh"
		wget "${i}/muslbuild.sh"
		mkdir patches
		cd patches
		wget "${i}/patches/gcc-4.9.2-musl.diff"
		cd ..
		chmod +x build.sh muslbuild.sh

	Build with gcc and glibc: 
		./build.sh

	Build with gcc and musl:
		./muslbuild.sh


Modifying and understanding the code in Omnicross:

	At this juncture in time all code and configuration is contained
	within a single file "build.sh". The "patches" and "src" dirs
	contain the needed compressed packages to make a cross compiler (
	gcc, gmp, libc etc). If there are not populated with the versions 
	of utilities you need the simepl retrieval function 
	"common_obtain_source_code" can be inviked by uncommenting it.
	
	All variable declarations are made at the beginning of the file and
	are prefixed with "MY". 

	To select an architecture, open the main build.sh file and modify
	MYTARG and MYLINUXARCH.  


		# aarch64
        		#MYTARG="aarch64-linux"
        		#MYLINUXARCH="arm64"

		# i586
        		MYTARG="i586-linux"
        		MYLINUXARCH="x86"

		# x86_64
        		#MYTARG="x86_64-linux"
        		#MYLINUXARCH="x86_64" 
	
	Functions that are C library specific are prefixed with "glibc_" 
	or "musl_" whereas functions that are shared between all package 
	sets (libc's) are prefixed with "common_".  

	If you are building against musl C libraries any functions
	not prefixed as "common_" or "musl_" should be commented out or
	controlled by various tests that I or the user/developer might 
	insert.

	And likewise for glibc, only functions prefixed "glibc_" and 
	"common_" should be invoked.

	

	Hopefully this method is simple enough to maintain a logical 
	control flow that can be easily understood and modified by all
	of Omnicross's users.  
	


Notes:


	These are the versions of various tools used to build this script.
	They are here for documentation purposes so that the steps can be
	reproduced at a later date if needed.


	date
	Wed Jul 15 17:27:55 CDT 2015

	make -v
	GNU Make 3.81 
	This program built for x86_64-pc-linux-gnu

	gawk -V
	GNU Awk 4.0.1
	Copyright (C) 1989, 1991-2012 Free Software Foundation.

	gcc -v
	Using built-in specs.
	COLLECT_GCC=gcc
	COLLECT_LTO_WRAPPER=/usr/lib/gcc/x86_64-linux-gnu/4.7/lto-wrapper
	Target: x86_64-linux-gnu 
	Thread model: posix
	gcc version 4.7.2 (Debian 4.7.2-5)

	cat /etc/debian_version 
	7.7

	uname -a
	Linux debiah 3.2.0-4-amd64 #1 SMP Debian 3.2.63-2+deb7u1 x86_64 GNU/Linux
